








// Functions


////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void GPIO_Init()
{
	RCC->AHBENR 	|= RCC_AHBENR_GPIOAEN;
	RCC->AHBENR 	|= RCC_AHBENR_GPIOBEN;
	RCC->AHBENR 	|= RCC_AHBENR_GPIOCEN;
}

void LED_RED_Init()
{
	GPIOC->MODER 	|= GPIO_MODER_MODER6_0;				// Set PC6 to output mode
	GPIOC->OTYPER 	&= ~(GPIO_OTYPER_OT_6);				// Set PC6 to push-pull output type 
	GPIOC->OSPEEDR 	&= ~(GPIO_OSPEEDR_OSPEEDR6_1 | 
						 GPIO_OSPEEDR_OSPEEDR6_0);		// Set PC6 to low speed 
	GPIOC->PUPDR	&= ~(GPIO_PUPDR_PUPDR6_1 | 
						 GPIO_PUPDR_PUPDR6_0);			// Set PC6 to no pull-up/down 
	GPIOC->ODR 		&= ~GPIO_ODR_6;						// Set PC6 output OFF
}

void LED_BLU_Init()
{
	GPIOC->MODER 	|= GPIO_MODER_MODER7_0;				// Set PC7 to output mode
	GPIOC->OTYPER 	&= ~(GPIO_OTYPER_OT_7);				// Set PC7 to push-pull output type 
	GPIOC->OSPEEDR 	&= ~(GPIO_OSPEEDR_OSPEEDR7_1 | 
						 GPIO_OSPEEDR_OSPEEDR7_0);		// Set PC7 to low speed 
	GPIOC->PUPDR	&= ~(GPIO_PUPDR_PUPDR7_1 | 
						 GPIO_PUPDR_PUPDR7_0);			// Set PC7 to no pull-up/down 
	GPIOC->ODR 		&= ~GPIO_ODR_7;						// Set PC7 output OFF
}

void LED_ORG_Init()
{
	GPIOC->MODER 	|= GPIO_MODER_MODER8_0;				// Set PC8 to output mode
	GPIOC->OTYPER 	&= ~(GPIO_OTYPER_OT_8);				// Set PC8 to push-pull output type 
	GPIOC->OSPEEDR 	&= ~(GPIO_OSPEEDR_OSPEEDR8_1 | 
						 GPIO_OSPEEDR_OSPEEDR8_0);		// Set PC8 to low speed 
	GPIOC->PUPDR	&= ~(GPIO_PUPDR_PUPDR8_1 | 
						 GPIO_PUPDR_PUPDR8_0);			// Set PC8 to no pull-up/down 
	GPIOC->ODR 		&= ~GPIO_ODR_8;						// Set PC8 output OFF
}

void LED_GRN_Init()
{
	GPIOC->MODER 	|= GPIO_MODER_MODER9_0;				// Set PC9 to output mode
	GPIOC->OTYPER 	&= ~(GPIO_OTYPER_OT_9);				// Set PC9 to push-pull output type 
	GPIOC->OSPEEDR 	&= ~(GPIO_OSPEEDR_OSPEEDR9_1 | 
						 GPIO_OSPEEDR_OSPEEDR9_0);		// Set PC9 to low speed 
	GPIOC->PUPDR	&= ~(GPIO_PUPDR_PUPDR9_1 | 
						 GPIO_PUPDR_PUPDR9_0);			// Set PC9 to no pull-up/down 
	GPIOC->ODR 		&= ~GPIO_ODR_9;						// Set PC9 output OFF
}
	
////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

void PWM_Init()
{
	
}

void PWM_SetDutyCycle()
{
}

void Encoder_Init()
{
}

void Set_Tone(int16_t tone)
{

}

void Buzzer_Overtravel()
{
	const int16_t delay = 100; 	// milliseconds
	static int8_t init = 0;
	
	if (init == 0)
	{
		// Set Buzzer Tone
		Set_Tone();
		
		// Start Buzzer 
		Buzzer_On();

		// Get Current System Time Stamp
		static int32_t TimeStamp = uwTick;  // HAL_GetTick()
	} 
	else 
	{
		if ((uwTick - TimeStamp) > delay)
		{
			Buzzer_Off();
			init = 0;
		}
	}
	
	
	
	// 
	
}

void Buzzer_On()
{}

void Buzzer_Off()
{}

global int16_t SYS_CTR_ACC;

void TIM1_Init()
{
	RCC->APB1ENR 	|= RCC_APB1ENR_TIM1EN;		// <---- TODO check this
	
}

void TIM2_Init()
{
	RCC->APB1ENR 	|= RCC_APB1ENR_TIM2EN;
}

void TIM3_Init()
{
	RCC->APB1ENR 	|= RCC_APB1ENR_TIM3EN;
}

void USART1_Init()
{
	RCC->APB1ENR 	|= RCC_APB1ENR_USART1EN;
}

void USART2_Init()
{
	RCC->APB1ENR 	|= RCC_APB1ENR_USART2EN;
}

void USART3_Init()
{
	RCC->APB1ENR 	|= RCC_APB1ENR_USART3EN;
}

void UART_Read()
{}

void UART_Write()			// Write one char to USART Serial
{}

void UART_WriteString()
{}

void SysTick_Init()			// Refreshrate
{
	RCC->APB2ENR|= RCC_APB2ENR_SYSCFGCOMPEN;  	// Enable RCC for SysTick 
	
	
	
	NVIC_SetPriority(SysTick_IRQn,1);			// Configure SysTick Priority Level
}

// EXT1 Configuration
	EXTI->IMR  |= (1 << 0);
	EXTI->RTSR |= (1 << 0);
	
	// Set EXTI0 Multiplexer for PA0
	SYSCFG->EXTICR[0] &= ~((1 << 2)|(1 << 1)|(1 << 0));
	
	// Enable and Set Priority fo the EXTI Interrupt
	NVIC_EnableIRQ(EXTI0_1_IRQn);
	NVIC_SetPriority(EXTI0_1_IRQn,2);
	
	
void PID_Update()
{
}



// Interrupts

void SysTick_Handler(void)
{
  HAL_IncTick();  
}

void TIM6_DAC_IRQHandler(void) 
{
}


// UART Commands from HMI





int main()
{
	
  HAL_Init();				// Reset all peripherals 
  SystemClock_Config();		// Configure system clock
  GPIO_Init();				// Enable GPIO RCC 
  
  

  LED_RED_Init();			// Configure Red LED 
  LED_BLU_Init();			// Configure Blue LED 
  LED_ORG_Init();			// Configure Orange LED 
  LED_GRN_Init();			// Configure Green LED 



}






